syntax = "proto3";
package provenance.msgfees.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "provenance/msgfees/v1/msgfees.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package          = "github.com/provenance-io/provenance/x/msgfees/types";
option java_package        = "io.provenance.msgfees.v1";
option java_multiple_files = true;

// Query defines the gRPC querier service for marker module.
service Query {
  // Params queries the parameters for x/msgfees
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/provenance/msgfees/v1/params";
  }

  // Query all Msgs which have fees associated with them.
  rpc QueryAllMsgBasedFees(QueryAllMsgBasedFeesRequest) returns (QueryAllMsgBasedFeesResponse) {
    option (google.api.http).get = "/provenance/msgfees/v1/params";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryAllMsgBasedFeesRequest queries all Msg which have fees associated with them.
message QueryAllMsgBasedFeesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// response for querying all msg's with fees associated with them
message QueryAllMsgBasedFeesResponse {
  repeated MsgBasedFee msg_based_fees = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
