syntax = "proto3";
package provenance.msgfees.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "provenance/msgfees/v1/msgfees.proto";
option go_package = "github.com/provenance-io/provenance/x/msgfees/types";

option java_package = "io.provenance.msgfees.v1";
option java_multiple_files = true;

// Service defines a gRPC service for interacting with transactions.
service Msg {

    rpc CreateFeeForMsg(CreateFeeForMsgRequest) returns (CreateFeeForMsgResponse) {

}
    // CalculateMsgBasedFees simulates executing a transaction for estimating gas usage.
    rpc CalculateMsgBasedFees (CalculateMsgBasedRequest) returns (CalculateMsgBasedFeesResponse) {
        option (google.api.http) = {
      post: "/provenance/tx/v1/calculate_msg_fees"
      body: "*"
    };
    }
}

// ComputeMsgBasedRequest is the request type for the Msg.CalculateMsgBasedFees
// RPC method.
message CalculateMsgBasedRequest {
    // tx is the transaction to simulate.
    cosmos.tx.v1beta1.Tx tx = 1;
}

// CalculateMsgBasedFeesResponse is the response type for the Msg.CalculateMsgBasedFees
// RPC method.
message CalculateMsgBasedFeesResponse {
    // amount is the amount of coins to be paid as a fee
    repeated cosmos.base.v1beta1.Coin fee_amount = 1 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message CreateFeeForMsgRequest {
    // msg to add Fee for.
    repeated MsgFees msgFees = 1;
}

message CreateFeeForMsgResponse {
    // msg to add Fee for.
    google.protobuf.Any msg = 1 [(cosmos_proto.accepts_interface) = "sdk.Msg"];

    //  Fee rate
    bytes fee_rate = 2 [
                       (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
                       (gogoproto.nullable)   = false,
                       (gogoproto.jsontag)    = "feerate,omitempty"
                       ];
}
