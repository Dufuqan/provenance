// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/marker/v1/marker.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MarkerType defines the types of marker
type MarkerType int32

const (
	// MARKER_TYPE_UNSPECIFIED is an invalid/unknown marker type.
	MarkerType_Unknown MarkerType = 0
	// MARKER_TYPE_COIN is a marker that represents a standard fungible coin (default).
	MarkerType_Coin MarkerType = 1
	// MARKER_TYPE_RESTRICTED is a marker that represents a denom with send_enabled = false.
	MarkerType_RestrictedCoin MarkerType = 2
)

var MarkerType_name = map[int32]string{
	0: "MARKER_TYPE_UNSPECIFIED",
	1: "MARKER_TYPE_COIN",
	2: "MARKER_TYPE_RESTRICTED",
}

var MarkerType_value = map[string]int32{
	"MARKER_TYPE_UNSPECIFIED": 0,
	"MARKER_TYPE_COIN":        1,
	"MARKER_TYPE_RESTRICTED":  2,
}

func (x MarkerType) String() string {
	return proto.EnumName(MarkerType_name, int32(x))
}

func (MarkerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7e2c25c71db7f99, []int{0}
}

// MarkerStatus defines the various states a marker account can be in.
type MarkerStatus int32

const (
	// MARKER_STATUS_UNSPECIFIED - Unknown/Invalid Marker Status
	StatusUndefined MarkerStatus = 0
	// MARKER_STATUS_PROPOSED - Initial configuration period, updates allowed, token supply not created.
	StatusProposed MarkerStatus = 1
	// MARKER_STATUS_FINALIZED - Configuration finalized, ready for supply creation
	StatusFinalized MarkerStatus = 2
	// MARKER_STATUS_ACTIVE - Supply is created, rules are in force.
	StatusActive MarkerStatus = 3
	// MARKER_STATUS_CANCELLED - Marker has been cancelled, pending destroy
	StatusCancelled MarkerStatus = 4
	// MARKER_STATUS_DESTROYED - Marker supply has all been recalled, marker is considered destroyed and no further
	// actions allowed.
	StatusDestroyed MarkerStatus = 5
)

var MarkerStatus_name = map[int32]string{
	0: "MARKER_STATUS_UNSPECIFIED",
	1: "MARKER_STATUS_PROPOSED",
	2: "MARKER_STATUS_FINALIZED",
	3: "MARKER_STATUS_ACTIVE",
	4: "MARKER_STATUS_CANCELLED",
	5: "MARKER_STATUS_DESTROYED",
}

var MarkerStatus_value = map[string]int32{
	"MARKER_STATUS_UNSPECIFIED": 0,
	"MARKER_STATUS_PROPOSED":    1,
	"MARKER_STATUS_FINALIZED":   2,
	"MARKER_STATUS_ACTIVE":      3,
	"MARKER_STATUS_CANCELLED":   4,
	"MARKER_STATUS_DESTROYED":   5,
}

func (MarkerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7e2c25c71db7f99, []int{1}
}

// Params defines the set of params for the account module.
type Params struct {
	// maximum amount of supply to allow a marker to be created with
	MaxTotalSupply uint64 `protobuf:"varint,1,opt,name=max_total_supply,json=maxTotalSupply,proto3,customtype=uint64" json:"max_total_supply"`
	// indicates if governance based controls of markers is allowed.
	EnableGovernance bool `protobuf:"varint,2,opt,name=enable_governance,json=enableGovernance,proto3" json:"enable_governance,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e2c25c71db7f99, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnableGovernance() bool {
	if m != nil {
		return m.EnableGovernance
	}
	return false
}

// MarkerAccount holds the marker configuration information in addition to a base account structure.
type MarkerAccount struct {
	// base cosmos account information including address and coin holdings.
	*types.BaseAccount `protobuf:"bytes,1,opt,name=base_account,json=baseAccount,proto3,embedded=base_account" json:"base_account,omitempty" yaml:"base_account"`
	// Address that owns the marker configuration.  This account must sign any requests
	// to change marker config (only valid for statuses prior to finalization)
	Manager string `protobuf:"bytes,2,opt,name=manager,proto3" json:"manager,omitempty" json:"manager,omitempty"`
	// Access control lists
	AccessControl []AccessGrant `protobuf:"bytes,3,rep,name=access_control,json=accessControl,proto3" json:"access_control"`
	// Indicates the current status of this marker record.
	Status MarkerStatus `protobuf:"varint,4,opt,name=status,proto3,enum=provenance.marker.v1.MarkerStatus" json:"status,omitempty"`
	// value denomination and total supply for the token.
	Denom string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	// the total supply expected for a marker.  This is the amount that is minted when a marker is created.
	Supply github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=supply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"supply" json:"total_supply" yaml:"total_supply"`
	// Marker type information
	MarkerType MarkerType `protobuf:"varint,7,opt,name=marker_type,json=markerType,proto3,enum=provenance.marker.v1.MarkerType" json:"marker_type,omitempty" json:"marker_type,omitempty"`
	// A fixed supply will mint additional coin automatically if the total supply decreases below a set value.  This
	// may occur if the coin is burned or an account holding the coin is slashed. (default: true)
	SupplyFixed bool `protobuf:"varint,8,opt,name=supply_fixed,json=supplyFixed,proto3" json:"supply_fixed,omitempty"`
}

func (m *MarkerAccount) Reset()      { *m = MarkerAccount{} }
func (*MarkerAccount) ProtoMessage() {}
func (*MarkerAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e2c25c71db7f99, []int{1}
}
func (m *MarkerAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkerAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkerAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkerAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkerAccount.Merge(m, src)
}
func (m *MarkerAccount) XXX_Size() int {
	return m.Size()
}
func (m *MarkerAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkerAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MarkerAccount proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("provenance.marker.v1.MarkerType", MarkerType_name, MarkerType_value)
	proto.RegisterEnum("provenance.marker.v1.MarkerStatus", MarkerStatus_name, MarkerStatus_value)
	proto.RegisterType((*Params)(nil), "provenance.marker.v1.Params")
	proto.RegisterType((*MarkerAccount)(nil), "provenance.marker.v1.MarkerAccount")
}

func init() { proto.RegisterFile("provenance/marker/v1/marker.proto", fileDescriptor_f7e2c25c71db7f99) }

var fileDescriptor_f7e2c25c71db7f99 = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x1c, 0x8d, 0xdb, 0x34, 0x0d, 0x93, 0x6e, 0x30, 0xb3, 0x15, 0x9b, 0x0d, 0x2b, 0xdb, 0xcd, 0x61,
	0x89, 0x0a, 0x75, 0x68, 0x40, 0x2b, 0x94, 0x5b, 0xe2, 0xb8, 0x2b, 0x8b, 0x6e, 0x1a, 0x39, 0x29,
	0x52, 0xf7, 0x62, 0x26, 0xf6, 0x6c, 0xd6, 0x34, 0x9e, 0x09, 0xf6, 0x24, 0x34, 0x7c, 0x00, 0xb4,
	0xca, 0x89, 0x23, 0x97, 0x48, 0x95, 0xe0, 0xc0, 0x07, 0xe0, 0xcc, 0x79, 0x8f, 0x15, 0x27, 0xc4,
	0x21, 0x42, 0xed, 0x85, 0x73, 0x3f, 0x01, 0xb2, 0x67, 0xda, 0xba, 0x10, 0x71, 0x8a, 0x7f, 0xf3,
	0x7b, 0xef, 0xf7, 0xe7, 0xcd, 0xcb, 0x80, 0x9d, 0x71, 0x48, 0xa7, 0x98, 0x20, 0xe2, 0xe2, 0x5a,
	0x80, 0xc2, 0x53, 0x1c, 0xd6, 0xa6, 0xfb, 0xe2, 0x4b, 0x1f, 0x87, 0x94, 0x51, 0xb8, 0x7d, 0x07,
	0xd1, 0x45, 0x62, 0xba, 0x5f, 0xde, 0x1e, 0xd2, 0x21, 0x4d, 0x00, 0xb5, 0xf8, 0x8b, 0x63, 0xcb,
	0x8a, 0x4b, 0xa3, 0x80, 0x46, 0x35, 0x34, 0x61, 0xaf, 0x6b, 0xd3, 0xfd, 0x01, 0x66, 0x68, 0x3f,
	0x09, 0x44, 0xfe, 0x31, 0xcf, 0x3b, 0x9c, 0xc8, 0x03, 0x91, 0x7a, 0xba, 0x72, 0x12, 0xe4, 0xba,
	0x38, 0x8a, 0x86, 0x21, 0x22, 0x8c, 0xe3, 0x2a, 0x33, 0x90, 0xeb, 0xa2, 0x10, 0x05, 0x11, 0xfc,
	0x1c, 0xc8, 0x01, 0x3a, 0x73, 0x18, 0x65, 0x68, 0xe4, 0x44, 0x93, 0xf1, 0x78, 0x34, 0x2b, 0x49,
	0x9a, 0x54, 0xcd, 0xb6, 0x8a, 0x6f, 0x97, 0x6a, 0xe6, 0xcf, 0xa5, 0x9a, 0x9b, 0xf8, 0x84, 0x3d,
	0xfb, 0xcc, 0x2e, 0x06, 0xe8, 0xac, 0x1f, 0xc3, 0x7a, 0x09, 0x0a, 0x7e, 0x04, 0xde, 0xc3, 0x04,
	0x0d, 0x46, 0xd8, 0x19, 0xd2, 0x29, 0x0e, 0x93, 0xa6, 0xa5, 0x35, 0x4d, 0xaa, 0xe6, 0x6d, 0x99,
	0x27, 0x9e, 0xdf, 0x9e, 0x37, 0xf2, 0x3f, 0x9e, 0xab, 0x99, 0xbf, 0xcf, 0x55, 0xa9, 0x72, 0x99,
	0x05, 0x0f, 0x5e, 0x24, 0xa3, 0x35, 0x5d, 0x97, 0x4e, 0x08, 0x83, 0x5f, 0x81, 0xad, 0x01, 0x8a,
	0xb0, 0x83, 0x78, 0x9c, 0xb4, 0x2f, 0xd4, 0x35, 0x5d, 0x6c, 0x96, 0x6c, 0x2e, 0x64, 0xd0, 0x5b,
	0x28, 0xc2, 0x82, 0xd7, 0xfa, 0xe0, 0x62, 0xa9, 0x4a, 0xd7, 0x4b, 0xf5, 0xe1, 0x0c, 0x05, 0xa3,
	0x46, 0x25, 0x5d, 0xa3, 0x62, 0x17, 0x06, 0x77, 0x48, 0xf8, 0x0c, 0x6c, 0x06, 0x88, 0xa0, 0x21,
	0x0e, 0x93, 0x01, 0xdf, 0x69, 0x3d, 0xb9, 0x5e, 0xaa, 0xa5, 0xaf, 0x23, 0x4a, 0x1a, 0x15, 0x91,
	0xf8, 0x98, 0x06, 0x3e, 0xc3, 0xc1, 0x98, 0xcd, 0x2a, 0xf6, 0x0d, 0x18, 0x76, 0x40, 0x91, 0x6b,
	0xe7, 0xb8, 0x94, 0xb0, 0x90, 0x8e, 0x4a, 0xeb, 0xda, 0x7a, 0xb5, 0x50, 0xdf, 0xd1, 0x57, 0x5d,
	0xa7, 0xde, 0x4c, 0xb0, 0xcf, 0x63, 0x9d, 0x5b, 0xd9, 0x58, 0x3d, 0xfb, 0x01, 0xa7, 0x1b, 0x9c,
	0x0d, 0x1b, 0x20, 0x17, 0x31, 0xc4, 0x26, 0x51, 0x29, 0xab, 0x49, 0xd5, 0x62, 0xbd, 0xb2, 0xba,
	0x0e, 0x97, 0xa7, 0x97, 0x20, 0x6d, 0xc1, 0x80, 0xdb, 0x60, 0xc3, 0xc3, 0x84, 0x06, 0xa5, 0x8d,
	0x78, 0x03, 0x9b, 0x07, 0xf0, 0x1b, 0x90, 0x13, 0x97, 0x96, 0x4b, 0x16, 0x3b, 0x11, 0x97, 0xf6,
	0x74, 0xe8, 0xb3, 0xd7, 0x93, 0x81, 0xee, 0xd2, 0x40, 0x38, 0x44, 0xfc, 0xec, 0x45, 0xde, 0x69,
	0x8d, 0xcd, 0xc6, 0x38, 0xd2, 0x2d, 0xc2, 0xae, 0x97, 0xea, 0x87, 0x5c, 0x86, 0xb4, 0x01, 0x2a,
	0x1a, 0x57, 0xf4, 0xde, 0x99, 0x2d, 0x1a, 0x41, 0x17, 0x14, 0xf8, 0xa8, 0x4e, 0x5c, 0xa6, 0xb4,
	0x99, 0x6c, 0xa2, 0xfd, 0xdf, 0x26, 0xfd, 0xd9, 0x18, 0xb7, 0xb4, 0xeb, 0xa5, 0xfa, 0xe4, 0x46,
	0xf2, 0x5b, 0x7a, 0x5a, 0x76, 0x10, 0xdc, 0xa2, 0xe1, 0x0e, 0xd8, 0xe2, 0xed, 0x9c, 0x57, 0xfe,
	0x19, 0xf6, 0x4a, 0xf9, 0xc4, 0x57, 0x05, 0x7e, 0x76, 0x10, 0x1f, 0x35, 0xca, 0x6f, 0xce, 0xd5,
	0x4c, 0x6c, 0xab, 0xdf, 0x7f, 0xdd, 0x2b, 0xde, 0x73, 0x94, 0xb5, 0xfb, 0xbd, 0x04, 0xc0, 0x5d,
	0x6f, 0x58, 0x05, 0x8f, 0x5e, 0x34, 0xed, 0x2f, 0x4c, 0xdb, 0xe9, 0x9f, 0x74, 0x4d, 0xe7, 0xb8,
	0xd3, 0xeb, 0x9a, 0x86, 0x75, 0x60, 0x99, 0x6d, 0x39, 0x53, 0x2e, 0xcc, 0x17, 0xda, 0xe6, 0x31,
	0x39, 0x25, 0xf4, 0x5b, 0x02, 0x15, 0x20, 0xa7, 0x91, 0xc6, 0x91, 0xd5, 0x91, 0xa5, 0x72, 0x7e,
	0xbe, 0xd0, 0xb2, 0x06, 0xf5, 0x09, 0xd4, 0xc1, 0xfb, 0xe9, 0xbc, 0x6d, 0xf6, 0xfa, 0xb6, 0x65,
	0xf4, 0xcd, 0xb6, 0xbc, 0x56, 0x86, 0xf3, 0x85, 0x56, 0xb4, 0x71, 0xc4, 0x42, 0xdf, 0x65, 0xd8,
	0x8b, 0xf1, 0xbb, 0xbf, 0xad, 0x81, 0xad, 0xf4, 0x75, 0xc2, 0x3a, 0x78, 0x2c, 0x0a, 0xf4, 0xfa,
	0xcd, 0xfe, 0x71, 0xef, 0x5f, 0xc3, 0x3c, 0x9c, 0x2f, 0xb4, 0x77, 0x39, 0xf4, 0x98, 0x78, 0xf8,
	0x95, 0x4f, 0xb0, 0x97, 0x6a, 0x2a, 0x38, 0x5d, 0xfb, 0xa8, 0x7b, 0xd4, 0x33, 0xdb, 0xb2, 0xc4,
	0x9b, 0x72, 0x42, 0x37, 0xa4, 0x63, 0x1a, 0x61, 0x0f, 0x7e, 0x72, 0xbb, 0xae, 0xc0, 0x1f, 0x58,
	0x9d, 0xe6, 0xa1, 0xf5, 0x32, 0x99, 0x32, 0xd5, 0xe1, 0xc0, 0x27, 0x68, 0xe4, 0x7f, 0x87, 0x3d,
	0xb8, 0x0b, 0xb6, 0xef, 0x33, 0x9a, 0x46, 0xdf, 0xfa, 0xd2, 0x94, 0xd7, 0xcb, 0xf2, 0x7c, 0xa1,
	0x6d, 0x71, 0x78, 0xd3, 0x65, 0xfe, 0x14, 0xff, 0xb7, 0xba, 0xd1, 0xec, 0x18, 0xe6, 0xe1, 0xa1,
	0xd9, 0x96, 0xb3, 0xe9, 0xea, 0x46, 0xec, 0x85, 0xd1, 0x68, 0xd5, 0x3c, 0xed, 0x58, 0xb6, 0xa3,
	0x13, 0xb3, 0x2d, 0x6f, 0xa4, 0x19, 0xed, 0x58, 0x3b, 0x3a, 0xc3, 0x5e, 0x39, 0xff, 0xe6, 0x27,
	0x25, 0xf3, 0xcb, 0xcf, 0x4a, 0xa6, 0x35, 0x7c, 0x7b, 0xa9, 0x48, 0x17, 0x97, 0x8a, 0xf4, 0xd7,
	0xa5, 0x22, 0xfd, 0x70, 0xa5, 0x64, 0x2e, 0xae, 0x94, 0xcc, 0x1f, 0x57, 0x4a, 0x06, 0x3c, 0xf2,
	0xe9, 0x4a, 0xd3, 0x75, 0xa5, 0x97, 0xf5, 0x94, 0xfb, 0xef, 0x20, 0x7b, 0x3e, 0x4d, 0x45, 0xb5,
	0xb3, 0x9b, 0x17, 0x32, 0xf9, 0x37, 0x0c, 0x72, 0xc9, 0xcb, 0xf8, 0xe9, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x2a, 0xa8, 0xae, 0x9b, 0xcd, 0x05, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxTotalSupply.Equal(that1.MaxTotalSupply) {
		return false
	}
	if this.EnableGovernance != that1.EnableGovernance {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableGovernance {
		i--
		if m.EnableGovernance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTotalSupply != 0 {
		i = encodeVarintMarker(dAtA, i, uint64(m.MaxTotalSupply))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkerAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkerAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkerAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupplyFixed {
		i--
		if m.SupplyFixed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.MarkerType != 0 {
		i = encodeVarintMarker(dAtA, i, uint64(m.MarkerType))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.Supply.Size()
		i -= size
		if _, err := m.Supply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMarker(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintMarker(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AccessControl) > 0 {
		for iNdEx := len(m.AccessControl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessControl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintMarker(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseAccount != nil {
		{
			size, err := m.BaseAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarker(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTotalSupply != 0 {
		n += 1 + sovMarker(uint64(m.MaxTotalSupply))
	}
	if m.EnableGovernance {
		n += 2
	}
	return n
}

func (m *MarkerAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAccount != nil {
		l = m.BaseAccount.Size()
		n += 1 + l + sovMarker(uint64(l))
	}
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovMarker(uint64(l))
	}
	if len(m.AccessControl) > 0 {
		for _, e := range m.AccessControl {
			l = e.Size()
			n += 1 + l + sovMarker(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovMarker(uint64(m.Status))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMarker(uint64(l))
	}
	l = m.Supply.Size()
	n += 1 + l + sovMarker(uint64(l))
	if m.MarkerType != 0 {
		n += 1 + sovMarker(uint64(m.MarkerType))
	}
	if m.SupplyFixed {
		n += 2
	}
	return n
}

func sovMarker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarker(x uint64) (n int) {
	return sovMarker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalSupply", wireType)
			}
			m.MaxTotalSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTotalSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGovernance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableGovernance = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMarker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMarker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkerAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkerAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkerAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAccount == nil {
				m.BaseAccount = &types.BaseAccount{}
			}
			if err := m.BaseAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessControl = append(m.AccessControl, AccessGrant{})
			if err := m.AccessControl[len(m.AccessControl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MarkerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			m.MarkerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarkerType |= MarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyFixed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupplyFixed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMarker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMarker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarker = fmt.Errorf("proto: unexpected end of group")
)
