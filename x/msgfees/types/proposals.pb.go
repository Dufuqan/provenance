// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/msgfees/v1/proposals.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/provenance-io/provenance/x/marker/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddMarkerProposal defines defines a governance proposal to create a new marker
type AddAdditionalMsgFeesProposal struct {
	Title            string                                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Coin  `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Msg              *types1.Any                              `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	MinAdditionalFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=min_additional_fee,json=minAdditionalFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_additional_fee" yaml:"min_additional_fee"`
	//  Fee rate, based on Gas used.
	FeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate,omitempty"`
}

func (m *AddAdditionalMsgFeesProposal) Reset()         { *m = AddAdditionalMsgFeesProposal{} }
func (m *AddAdditionalMsgFeesProposal) String() string { return proto.CompactTextString(m) }
func (*AddAdditionalMsgFeesProposal) ProtoMessage()    {}
func (*AddAdditionalMsgFeesProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2e168825d6c34a4, []int{0}
}
func (m *AddAdditionalMsgFeesProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAdditionalMsgFeesProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAdditionalMsgFeesProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAdditionalMsgFeesProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAdditionalMsgFeesProposal.Merge(m, src)
}
func (m *AddAdditionalMsgFeesProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddAdditionalMsgFeesProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAdditionalMsgFeesProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddAdditionalMsgFeesProposal proto.InternalMessageInfo

func (m *AddAdditionalMsgFeesProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddAdditionalMsgFeesProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddAdditionalMsgFeesProposal) GetMsg() *types1.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *AddAdditionalMsgFeesProposal) GetMinAdditionalFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MinAdditionalFee
	}
	return nil
}

func init() {
	proto.RegisterType((*AddAdditionalMsgFeesProposal)(nil), "provenance.msgfees.v1.AddAdditionalMsgFeesProposal")
}

func init() {
	proto.RegisterFile("provenance/msgfees/v1/proposals.proto", fileDescriptor_a2e168825d6c34a4)
}

var fileDescriptor_a2e168825d6c34a4 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0x7a, 0x7f, 0x20, 0x65, 0x40, 0x51, 0x91, 0xd2, 0x0a, 0x25, 0xa5, 0x12, 0x47,
	0x07, 0x6a, 0xab, 0x74, 0xbb, 0xad, 0xe5, 0x74, 0x5b, 0xa5, 0x53, 0x46, 0x96, 0xca, 0x49, 0xde,
	0x1a, 0xab, 0xb5, 0x1d, 0xc5, 0x6e, 0xd5, 0x7c, 0x0b, 0x26, 0x66, 0x66, 0x66, 0x3e, 0xc4, 0x89,
	0xe9, 0x46, 0xc4, 0x50, 0x50, 0xbb, 0x20, 0x16, 0x24, 0x3e, 0x01, 0x4a, 0xe2, 0xfe, 0x91, 0x8a,
	0xd0, 0x4d, 0xf1, 0x9b, 0xe7, 0xf1, 0xeb, 0xdf, 0xfb, 0x24, 0xb6, 0x5f, 0x24, 0xa9, 0x5c, 0x80,
	0x20, 0x22, 0x02, 0xcc, 0x15, 0x9d, 0x00, 0x28, 0xbc, 0xe8, 0xe1, 0x24, 0x95, 0x89, 0x54, 0x64,
	0xa6, 0x50, 0x92, 0x4a, 0x2d, 0x9d, 0xa7, 0x7b, 0x1b, 0x32, 0x36, 0xb4, 0xe8, 0x35, 0xeb, 0x54,
	0x52, 0x59, 0x38, 0x70, 0xbe, 0x2a, 0xcd, 0x4d, 0x2f, 0x92, 0x8a, 0x4b, 0x85, 0x43, 0x22, 0xa6,
	0x78, 0xd1, 0x0b, 0x41, 0x93, 0x5e, 0x51, 0x1c, 0xe9, 0x0a, 0x76, 0x7a, 0x24, 0x99, 0x30, 0xfa,
	0xf3, 0x43, 0x26, 0x92, 0x4e, 0x21, 0xcd, 0x91, 0xca, 0x95, 0xb1, 0x5c, 0xfc, 0xd3, 0x42, 0xa2,
	0x08, 0x94, 0xa2, 0x29, 0x11, 0xda, 0xf8, 0x1a, 0x54, 0x4a, 0x3a, 0x03, 0x5c, 0x54, 0xe1, 0x7c,
	0x82, 0x89, 0xc8, 0x8c, 0xd4, 0x34, 0x14, 0x7a, 0xb9, 0x63, 0xd0, 0xcb, 0xed, 0xb6, 0x52, 0x1b,
	0x97, 0xa3, 0x95, 0x45, 0x29, 0xb5, 0x7f, 0x57, 0xed, 0x67, 0x83, 0x38, 0x1e, 0xc4, 0x31, 0xd3,
	0x4c, 0x0a, 0x32, 0x1b, 0x29, 0x7a, 0x0d, 0xa0, 0x6e, 0x4c, 0x62, 0x4e, 0xdd, 0x3e, 0xd5, 0x4c,
	0xcf, 0xc0, 0xb5, 0x5a, 0x56, 0xe7, 0x51, 0x50, 0x16, 0x4e, 0xcb, 0xae, 0xc5, 0xa0, 0xa2, 0x94,
	0x25, 0xf9, 0x2e, 0xf7, 0x41, 0xa1, 0x1d, 0xbe, 0x72, 0x42, 0xfb, 0x8c, 0x70, 0x39, 0x17, 0xda,
	0xad, 0xb6, 0xac, 0x4e, 0xed, 0x75, 0x03, 0x99, 0x73, 0xf3, 0x98, 0x90, 0x41, 0x44, 0x6f, 0x24,
	0x13, 0x43, 0x7c, 0xbb, 0xf2, 0x2b, 0xdf, 0x56, 0xfe, 0x4b, 0xca, 0xf4, 0xbb, 0x79, 0x88, 0x22,
	0xc9, 0x0d, 0xa4, 0x79, 0x74, 0x55, 0x3c, 0xc5, 0x3a, 0x4b, 0x40, 0x15, 0x1b, 0x02, 0xd3, 0xd9,
	0xe9, 0xdb, 0x55, 0xae, 0xa8, 0x7b, 0x52, 0x1c, 0x50, 0x47, 0x65, 0x38, 0x68, 0x1b, 0x0e, 0x1a,
	0x88, 0x6c, 0x58, 0xfb, 0xf2, 0xb9, 0x7b, 0xae, 0xe2, 0x29, 0x1a, 0x29, 0x1a, 0xe4, 0x6e, 0xe7,
	0x83, 0x65, 0x3b, 0x9c, 0x89, 0x31, 0xd9, 0x8d, 0x3c, 0x9e, 0x00, 0xb8, 0xa7, 0xad, 0xea, 0xff,
	0x29, 0x47, 0x39, 0xe5, 0x9f, 0x95, 0xdf, 0xc8, 0x08, 0x9f, 0x5d, 0xb6, 0x8f, 0x5b, 0xb4, 0x3f,
	0x7d, 0xf7, 0x3b, 0xf7, 0x1c, 0x41, 0x05, 0x4f, 0x38, 0x13, 0xfb, 0xd4, 0xaf, 0x01, 0x9c, 0xb1,
	0xfd, 0x70, 0x02, 0x30, 0x4e, 0x89, 0x06, 0xf7, 0xac, 0x65, 0x75, 0x1e, 0x0f, 0xaf, 0x4c, 0x30,
	0x17, 0xf7, 0xe8, 0x7a, 0x05, 0xd1, 0xaf, 0x95, 0xef, 0x6c, 0x3b, 0xbc, 0x92, 0x9c, 0x69, 0xe0,
	0x89, 0xce, 0x82, 0xf3, 0x09, 0x40, 0x40, 0x34, 0x5c, 0x9e, 0xfc, 0xfc, 0xe8, 0x5b, 0x43, 0x76,
	0xbb, 0xf6, 0xac, 0xbb, 0xb5, 0x67, 0xfd, 0x58, 0x7b, 0xd6, 0xfb, 0x8d, 0x57, 0xb9, 0xdb, 0x78,
	0x95, 0xaf, 0x1b, 0xaf, 0x62, 0xbb, 0xac, 0xf8, 0xe5, 0x8f, 0x2f, 0xc6, 0x8d, 0xf5, 0xb6, 0x7f,
	0x80, 0xb0, 0xf7, 0x74, 0x99, 0x3c, 0xa8, 0xf0, 0x72, 0x77, 0xe7, 0x0a, 0xa6, 0xf0, 0xac, 0xf8,
	0x14, 0xfd, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x70, 0x71, 0x03, 0xc2, 0x96, 0x03, 0x00, 0x00,
}

func (this *AddAdditionalMsgFeesProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddAdditionalMsgFeesProposal)
	if !ok {
		that2, ok := that.(AddAdditionalMsgFeesProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if len(this.MinAdditionalFee) != len(that1.MinAdditionalFee) {
		return false
	}
	for i := range this.MinAdditionalFee {
		if !this.MinAdditionalFee[i].Equal(&that1.MinAdditionalFee[i]) {
			return false
		}
	}
	if !this.FeeRate.Equal(that1.FeeRate) {
		return false
	}
	return true
}
func (m *AddAdditionalMsgFeesProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAdditionalMsgFeesProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAdditionalMsgFeesProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposals(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.MinAdditionalFee) > 0 {
		for iNdEx := len(m.MinAdditionalFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinAdditionalFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposals(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposals(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposals(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposals(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposals(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddAdditionalMsgFeesProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovProposals(uint64(l))
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovProposals(uint64(l))
	}
	if len(m.MinAdditionalFee) > 0 {
		for _, e := range m.MinAdditionalFee {
			l = e.Size()
			n += 1 + l + sovProposals(uint64(l))
		}
	}
	l = m.FeeRate.Size()
	n += 1 + l + sovProposals(uint64(l))
	return n
}

func sovProposals(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposals(x uint64) (n int) {
	return sovProposals(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddAdditionalMsgFeesProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAdditionalMsgFeesProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAdditionalMsgFeesProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types1.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAdditionalFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinAdditionalFee = append(m.MinAdditionalFee, types.Coin{})
			if err := m.MinAdditionalFee[len(m.MinAdditionalFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposals(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposals
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposals
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposals
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposals        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposals          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposals = fmt.Errorf("proto: unexpected end of group")
)
