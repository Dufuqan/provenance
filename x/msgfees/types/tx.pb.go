// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/msgfees/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	tx "github.com/cosmos/cosmos-sdk/types/tx"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CalculateFeePerMsgRequest is the request type for the Msg.CalculateMsgBasedFees
// RPC method.
type CalculateFeePerMsgRequest struct {
	// tx is the transaction to simulate.
	Tx *tx.Tx `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *CalculateFeePerMsgRequest) Reset()         { *m = CalculateFeePerMsgRequest{} }
func (m *CalculateFeePerMsgRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateFeePerMsgRequest) ProtoMessage()    {}
func (*CalculateFeePerMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6bb65eaf858b5f, []int{0}
}
func (m *CalculateFeePerMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateFeePerMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateFeePerMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateFeePerMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateFeePerMsgRequest.Merge(m, src)
}
func (m *CalculateFeePerMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *CalculateFeePerMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateFeePerMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateFeePerMsgRequest proto.InternalMessageInfo

func (m *CalculateFeePerMsgRequest) GetTx() *tx.Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

// CalculateMsgBasedFeesResponse is the response type for the Msg.CalculateMsgBasedFees
// RPC method.
type CalculateMsgBasedFeesResponse struct {
	// amount is the amount of coins to be paid as a fee
	FeeAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=fee_amount,json=feeAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_amount"`
}

func (m *CalculateMsgBasedFeesResponse) Reset()         { *m = CalculateMsgBasedFeesResponse{} }
func (m *CalculateMsgBasedFeesResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateMsgBasedFeesResponse) ProtoMessage()    {}
func (*CalculateMsgBasedFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6bb65eaf858b5f, []int{1}
}
func (m *CalculateMsgBasedFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateMsgBasedFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateMsgBasedFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateMsgBasedFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateMsgBasedFeesResponse.Merge(m, src)
}
func (m *CalculateMsgBasedFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *CalculateMsgBasedFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateMsgBasedFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateMsgBasedFeesResponse proto.InternalMessageInfo

func (m *CalculateMsgBasedFeesResponse) GetFeeAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeAmount
	}
	return nil
}

// create fee for msg's (repeated)
type CreateMsgBasedFeeRequest struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// msg to add Fee for.
	MsgFees *MsgBasedFee `protobuf:"bytes,2,opt,name=msg_fees,json=msgFees,proto3" json:"msg_fees,omitempty"`
}

func (m *CreateMsgBasedFeeRequest) Reset()         { *m = CreateMsgBasedFeeRequest{} }
func (m *CreateMsgBasedFeeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMsgBasedFeeRequest) ProtoMessage()    {}
func (*CreateMsgBasedFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6bb65eaf858b5f, []int{2}
}
func (m *CreateMsgBasedFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMsgBasedFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMsgBasedFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMsgBasedFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMsgBasedFeeRequest.Merge(m, src)
}
func (m *CreateMsgBasedFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateMsgBasedFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMsgBasedFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMsgBasedFeeRequest proto.InternalMessageInfo

func (m *CreateMsgBasedFeeRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *CreateMsgBasedFeeRequest) GetMsgFees() *MsgBasedFee {
	if m != nil {
		return m.MsgFees
	}
	return nil
}

// response for CreateFeeForMsg
type CreateMsgBasedFeeResponse struct {
	// msg to add Fee for.
	MsgFees *MsgBasedFee `protobuf:"bytes,1,opt,name=msg_fees,json=msgFees,proto3" json:"msg_fees,omitempty"`
}

func (m *CreateMsgBasedFeeResponse) Reset()         { *m = CreateMsgBasedFeeResponse{} }
func (m *CreateMsgBasedFeeResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMsgBasedFeeResponse) ProtoMessage()    {}
func (*CreateMsgBasedFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6bb65eaf858b5f, []int{3}
}
func (m *CreateMsgBasedFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMsgBasedFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMsgBasedFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMsgBasedFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMsgBasedFeeResponse.Merge(m, src)
}
func (m *CreateMsgBasedFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateMsgBasedFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMsgBasedFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMsgBasedFeeResponse proto.InternalMessageInfo

func (m *CreateMsgBasedFeeResponse) GetMsgFees() *MsgBasedFee {
	if m != nil {
		return m.MsgFees
	}
	return nil
}

func init() {
	proto.RegisterType((*CalculateFeePerMsgRequest)(nil), "provenance.msgfees.v1.CalculateFeePerMsgRequest")
	proto.RegisterType((*CalculateMsgBasedFeesResponse)(nil), "provenance.msgfees.v1.CalculateMsgBasedFeesResponse")
	proto.RegisterType((*CreateMsgBasedFeeRequest)(nil), "provenance.msgfees.v1.CreateMsgBasedFeeRequest")
	proto.RegisterType((*CreateMsgBasedFeeResponse)(nil), "provenance.msgfees.v1.CreateMsgBasedFeeResponse")
}

func init() { proto.RegisterFile("provenance/msgfees/v1/tx.proto", fileDescriptor_4c6bb65eaf858b5f) }

var fileDescriptor_4c6bb65eaf858b5f = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xa6, 0x12, 0xd0, 0x2d, 0x17, 0x2c, 0x22, 0x25, 0x16, 0xb8, 0xc5, 0x80, 0x14, 0x90,
	0xea, 0x6d, 0x52, 0x4e, 0x48, 0x1c, 0x9a, 0x48, 0xbd, 0x45, 0xaa, 0x22, 0x4e, 0xbd, 0x44, 0x1b,
	0x67, 0xb2, 0x98, 0xc6, 0xbb, 0xc1, 0xb3, 0x89, 0x5c, 0x89, 0x13, 0x57, 0x2e, 0x48, 0xfc, 0x05,
	0x27, 0xc4, 0x57, 0xf4, 0x58, 0x89, 0x0b, 0x27, 0x40, 0x09, 0x1f, 0x82, 0x6c, 0xaf, 0x5d, 0xa3,
	0x3a, 0x02, 0x4e, 0xf6, 0xee, 0x9b, 0x79, 0x6f, 0x66, 0xf6, 0x0d, 0x75, 0xe6, 0x91, 0x5a, 0x82,
	0xe4, 0xd2, 0x07, 0x16, 0xa2, 0x98, 0x02, 0x20, 0x5b, 0x76, 0x98, 0x8e, 0xbd, 0x79, 0xa4, 0xb4,
	0xb2, 0x1a, 0x57, 0xb8, 0x67, 0x70, 0x6f, 0xd9, 0xb1, 0xef, 0x0a, 0x25, 0x54, 0x1a, 0xc1, 0x92,
	0xbf, 0x2c, 0xd8, 0x76, 0x7c, 0x85, 0xa1, 0x42, 0x36, 0xe6, 0x08, 0x6c, 0xd9, 0x19, 0x83, 0xe6,
	0x1d, 0xe6, 0xab, 0x40, 0x5e, 0xc3, 0xe5, 0x59, 0x81, 0x27, 0x07, 0x83, 0x3f, 0xac, 0x2e, 0x26,
	0xd7, 0xcd, 0x82, 0x5a, 0x19, 0xc9, 0x28, 0x53, 0xcf, 0x0e, 0x06, 0xba, 0x27, 0x94, 0x12, 0x33,
	0x60, 0x7c, 0x1e, 0x30, 0x2e, 0xa5, 0xd2, 0x5c, 0x07, 0x4a, 0xe6, 0xa8, 0x6d, 0xd4, 0x75, 0x5c,
	0x68, 0xe7, 0x6d, 0xda, 0x2d, 0x93, 0x99, 0x9e, 0xc6, 0x8b, 0x29, 0xe3, 0xf2, 0x3c, 0x83, 0xdc,
	0x1e, 0x6d, 0xf5, 0xf9, 0xcc, 0x5f, 0xcc, 0xb8, 0x86, 0x63, 0x80, 0x13, 0x88, 0x06, 0x28, 0x86,
	0xf0, 0x66, 0x01, 0xa8, 0xad, 0xc7, 0xb4, 0xae, 0xe3, 0x26, 0xd9, 0x23, 0xed, 0x9d, 0x6e, 0xc3,
	0x33, 0xc5, 0xe8, 0xd8, 0x33, 0x02, 0xde, 0xcb, 0x78, 0x58, 0xd7, 0xb1, 0xfb, 0x9e, 0xd0, 0xfb,
	0x05, 0xc9, 0x00, 0x45, 0x8f, 0x23, 0x4c, 0x8e, 0x01, 0x70, 0x08, 0x38, 0x57, 0x12, 0xc1, 0x7a,
	0x4d, 0xe9, 0x14, 0x60, 0xc4, 0x43, 0xb5, 0x90, 0xba, 0x49, 0xf6, 0xb6, 0xda, 0x3b, 0xdd, 0x56,
	0x4e, 0x98, 0xcc, 0xb3, 0xa0, 0xec, 0xab, 0x40, 0xf6, 0x0e, 0x2e, 0xbe, 0xef, 0xd6, 0x3e, 0xfd,
	0xd8, 0x6d, 0x8b, 0x40, 0xbf, 0x5a, 0x8c, 0x3d, 0x5f, 0x85, 0x66, 0x14, 0xe6, 0xb3, 0x8f, 0x93,
	0x33, 0xa6, 0xcf, 0xe7, 0x80, 0x69, 0x02, 0x0e, 0xb7, 0xa7, 0x00, 0x47, 0x29, 0xbb, 0xfb, 0x96,
	0x36, 0xfb, 0x11, 0xfc, 0x59, 0x49, 0xde, 0xd0, 0x03, 0x7a, 0x7b, 0x1a, 0xa9, 0x70, 0xc4, 0x27,
	0x93, 0x08, 0x10, 0xd3, 0xd6, 0xb6, 0x87, 0x3b, 0xc9, 0xdd, 0x51, 0x76, 0x65, 0xbd, 0xa0, 0xb7,
	0x42, 0x14, 0xa3, 0xe4, 0x49, 0x9a, 0xf5, 0xb4, 0x73, 0xd7, 0xab, 0x74, 0x89, 0x57, 0xe6, 0xbf,
	0x19, 0xa2, 0x48, 0x3a, 0x76, 0x4f, 0x69, 0xab, 0x42, 0xdd, 0x8c, 0xa1, 0xcc, 0x4d, 0xfe, 0x9b,
	0xbb, 0xfb, 0xa5, 0x4e, 0xb7, 0x06, 0x28, 0xac, 0x98, 0xde, 0xb9, 0xa6, 0x61, 0xb1, 0x0d, 0x4c,
	0x9b, 0x66, 0x61, 0x1f, 0xfc, 0x7b, 0x42, 0x56, 0xbe, 0x5b, 0xb3, 0x3e, 0x13, 0xda, 0xa8, 0x7c,
	0x69, 0x6b, 0x23, 0xdb, 0x26, 0x73, 0xd9, 0xcf, 0xfe, 0x96, 0x51, 0xe5, 0x24, 0x97, 0xbd, 0xfb,
	0xfa, 0xeb, 0x63, 0xfd, 0x89, 0xfb, 0x88, 0x95, 0xb6, 0x29, 0xf5, 0x3c, 0xf3, 0xf3, 0xc4, 0x51,
	0x3e, 0xe4, 0xe7, 0xe4, 0x69, 0x2f, 0xb8, 0x58, 0x39, 0xe4, 0x72, 0xe5, 0x90, 0x9f, 0x2b, 0x87,
	0x7c, 0x58, 0x3b, 0xb5, 0xcb, 0xb5, 0x53, 0xfb, 0xb6, 0x76, 0x6a, 0xb4, 0x19, 0xa8, 0xea, 0x12,
	0x4e, 0xc8, 0xe9, 0x61, 0xc9, 0x79, 0x57, 0x31, 0xfb, 0x81, 0x2a, 0xcb, 0xc6, 0xc5, 0x1a, 0xa7,
	0x56, 0x1c, 0xdf, 0x48, 0x57, 0xea, 0xf0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x55, 0xc5,
	0xfd, 0x76, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// create fee for an associated Msg (repeated)
	// TODO : this goes away i think in prod because MsgFees can only be created by Gov
	CreateMsgBasedFee(ctx context.Context, in *CreateMsgBasedFeeRequest, opts ...grpc.CallOption) (*CreateMsgBasedFeeResponse, error)
	// CalculateMsgBasedFees simulates executing a transaction for estimating gas usage.
	CalculateMsgBasedFees(ctx context.Context, in *CalculateFeePerMsgRequest, opts ...grpc.CallOption) (*CalculateMsgBasedFeesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateMsgBasedFee(ctx context.Context, in *CreateMsgBasedFeeRequest, opts ...grpc.CallOption) (*CreateMsgBasedFeeResponse, error) {
	out := new(CreateMsgBasedFeeResponse)
	err := c.cc.Invoke(ctx, "/provenance.msgfees.v1.Msg/CreateMsgBasedFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CalculateMsgBasedFees(ctx context.Context, in *CalculateFeePerMsgRequest, opts ...grpc.CallOption) (*CalculateMsgBasedFeesResponse, error) {
	out := new(CalculateMsgBasedFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.msgfees.v1.Msg/CalculateMsgBasedFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// create fee for an associated Msg (repeated)
	// TODO : this goes away i think in prod because MsgFees can only be created by Gov
	CreateMsgBasedFee(context.Context, *CreateMsgBasedFeeRequest) (*CreateMsgBasedFeeResponse, error)
	// CalculateMsgBasedFees simulates executing a transaction for estimating gas usage.
	CalculateMsgBasedFees(context.Context, *CalculateFeePerMsgRequest) (*CalculateMsgBasedFeesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateMsgBasedFee(ctx context.Context, req *CreateMsgBasedFeeRequest) (*CreateMsgBasedFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMsgBasedFee not implemented")
}
func (*UnimplementedMsgServer) CalculateMsgBasedFees(ctx context.Context, req *CalculateFeePerMsgRequest) (*CalculateMsgBasedFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMsgBasedFees not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateMsgBasedFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMsgBasedFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMsgBasedFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.msgfees.v1.Msg/CreateMsgBasedFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMsgBasedFee(ctx, req.(*CreateMsgBasedFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CalculateMsgBasedFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFeePerMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CalculateMsgBasedFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.msgfees.v1.Msg/CalculateMsgBasedFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CalculateMsgBasedFees(ctx, req.(*CalculateFeePerMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.msgfees.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMsgBasedFee",
			Handler:    _Msg_CreateMsgBasedFee_Handler,
		},
		{
			MethodName: "CalculateMsgBasedFees",
			Handler:    _Msg_CalculateMsgBasedFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/msgfees/v1/tx.proto",
}

func (m *CalculateFeePerMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateFeePerMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateFeePerMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CalculateMsgBasedFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateMsgBasedFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateMsgBasedFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeAmount) > 0 {
		for iNdEx := len(m.FeeAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateMsgBasedFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMsgBasedFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMsgBasedFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgFees != nil {
		{
			size, err := m.MsgFees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateMsgBasedFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMsgBasedFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMsgBasedFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgFees != nil {
		{
			size, err := m.MsgFees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CalculateFeePerMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CalculateMsgBasedFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeAmount) > 0 {
		for _, e := range m.FeeAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *CreateMsgBasedFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MsgFees != nil {
		l = m.MsgFees.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CreateMsgBasedFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgFees != nil {
		l = m.MsgFees.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CalculateFeePerMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateFeePerMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateFeePerMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &tx.Tx{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateMsgBasedFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateMsgBasedFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateMsgBasedFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAmount = append(m.FeeAmount, types.Coin{})
			if err := m.FeeAmount[len(m.FeeAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMsgBasedFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMsgBasedFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMsgBasedFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgFees == nil {
				m.MsgFees = &MsgBasedFee{}
			}
			if err := m.MsgFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMsgBasedFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMsgBasedFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMsgBasedFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgFees == nil {
				m.MsgFees = &MsgBasedFee{}
			}
			if err := m.MsgFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
